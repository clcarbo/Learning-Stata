----
title: "7. Conditionals, Groups, and Scalars"
author:
    - Bill Carbonaro
    - Christopher Carbonaro
layout: home
----

# Conditional statements

## `if` conditions
Stata will run commands that are specific to subgroups that are defined by 
logical statements. For example, let's say that we want to know which states 
have a population less than one million. We can tell Stata to list the names of 
those states that meet that condition by using an `if` statement.

```stata
<<dd_do>>
sysuse census.dta, clear 
list state pop if pop<1000000
<</dd_do>>
```
 
We could ask for the average population for Southern states. "South" is coded as
'3'. Or, we could see the average deaths in small states (less than a 1 million
in population).

```stata
<<dd_do>>
sum pop if region==3 // Notice "equals" is "==" in Stata. 
sum death if pop<1000000
<</dd_do>>
```

## Multiple conditions with `and` and `or`
We can also create joint conditions. We use the ampersand (`&`) to specify that
both conditions must be true.

```stata
<<dd_do>>
sum pop if region==3 & medage>30 // Both conditions have to be met. 
<</dd_do>>
```

Either/or conditional statements work too. For example, we can specify West or
South by using the bar character (`|`, usually above your 'enter' key).

```stata
<<dd_do>>
sum pop if region==3 | region==4
<</dd_do>>
```

## Negating conditions
We can also exclude certain groups. In this case, we will include all states 
but Southern states.

```stata
<<dd_do>>
sum pop if region~=4 // ~= means "not equal to." != also means "not equal to."
<</dd_do>>
```

# Groups

Conditionals can be helpful, but they can be tedious to use if we wish to check
all possible groupings within our data. Consider the following lines:

```stata
<<dd_do>>
// We could do the following to get mean population by region. 
sum pop if region==1
sum pop if region==2
sum pop if region==3
sum pop if region==4
<</dd_do>>
```

We had to rewrite the same code four times. This isn't a huge deal, but quickly
becomes tedious if there are many groups (and, in some cases, completely
infeasible; what if we had 10,000 groups?). Luckily, Stata lets us group our
information by another variable.

```stata
<<dd_do>>

****************
** BY GROUPS ***
****************

// Or we could ask Stata to do this for us in one command. 
by region, sort: sum pop
by region, sort: sum pop medage death divorce 
<</dd_do>>
```

# Storing information with scalars

What if we compute a value, but then need to use that value for new
computations? We can do this by storing the value as a *scalar*. Anyone familiar
with other languages will recognize this as being akin to creating a primitive
variable.

For example, what if we want to estimate the number of deaths for states with that have 
populations that are above average? First, we estimate the mean population. Then, 
we can save that value as a scalar. Finally, we can use an if statement to create 
a conditional command.

```stata
<<dd_do>>
// STEP ONE: estimate the average population 
sum pop 

// STEP TWO: List stored values (optional), and save the estimate as a scalar. 
return list /* This will list the values from the prior command that Stata has 
stored in memory, and indicates how to reference them. We want 'r(mean)' which 
is the mean. */

display "The mean population of the 50 states is " r(mean) 

/* This value is stored temporarily. If we re-estimated 'sum' for a different variable, 
r(mean) will be overwritten. We can create a scalar in Stata that will permanently store 
this values in Stata, until we clear it from memory. */
 
scalar popmean = r(mean) // Stores the mean as a scalar called 'popmean' 
scalar popsd = r(sd) // Stores the SD as a scalar called 'popsd'
scalar dir // lists all stored scalars  

display "The mean population of the 50 states is " `=popmean' ///
" and the S.D. is " `=popsd'

// STEP THREE: Use scalar to select cases. 
sum death if pop>`=popmean'
<</dd_do>>
```

We can use stored scalars to do any kind of math we want.

```stata
<<dd_do>>
scalar hipop = `=popmean'+(.5*`=popsd') // State population that is 0.5 SD above the mean
scalar lopop = `=popmean'-(.5*`=popsd') // State population that is 0.5 SD below the mean

list state pop if pop>`=hipop' | pop<`=lopop'

sum death if pop>`=hipop' // Av. deaths for high population states 
sum death if pop<`=lopop' // Av. deaths for low population states 
<</dd_do>>
```

