----
title: "6. Basics: Saving Output"
author:
    - Bill Carbonaro
    - Christopher Carbonaro
layout: home
----

# Introducing `.log` files

TL;DR: your `.do` files should always start with something that looks like this:

```stata
capture log close 
log using output/learning_stata_2_basics_01.log, replace text
```

In our first `.do` file, there was no record of our output. It appeared beneath
our code (if using Atom) or in our "Results" window (if using Stata), and then
disappeared when we closed the program. To save both the output and the commands
that we submitted, we can open a `.log` file in Stata. Every `.do` file should
have a `.log` file because it will serve as a back-up record of the `.do` file
as well as your results. **Note:** graphs will not appear in the`.log` file
because they are 'plain-text' files. More on that later. `.do` files should always
begin by opening a `.log` file.

## Log vs. command files

In Stata, there are two types of`.log` files: "log" and "command." "Log" files
save both your commands and your output (i.e., what appears in the output
window). The "command" file only stores your commands. This is very nice because
it essentially creates a backup of your `.do` file! Which (**trust me**) can be
really helpful if something goes awry! You can include both in the same `.do` file.
That's what I do below.

```stata
* Log the commands and output into the specified .log file
log using output/learning_stata_2_basics_01.log, replace text

* Log the commands into the specified .log file
cmdlog using output/learning_stata_2_basics_01cmd.log, append
```

## Logging from your `.do` files

> IMPORTANT!`.log` files can "opened" and "closed" (also suspended) in your `.do` files. 
> The simplest and safest approach is to open the`.log` file at the beginning of the
> `.do` file and then close it at the very end. That way, everything is saved.

However... you need to include the following lines to start your `.do` files. If
you try to open a`.log` file when one is already open, you will get an error. We
use the command `log close` to take care of that potential problem. Unfortunately,
that command will give you an error if a`.log` file is not open! Here, the
`capture` command comes to the rescue! Entering this command at the beginning of the
line tells Stata 'if this command returns an error, just keep going!'

```stata
* Close any open log files
capture log close 

* Close any open command files
capture cmdlog close
```

Finally, I always give my`.log` files the same names as my `.do` files. That way, I
always know which `.do` file created a given`.log` file.

# Logging your data summaries

As an example, let's consider how you might capture some more complicated
information about your data.

```stata
<<dd_do>>
// Load the dataset
sysuse census.dta, clear 

***********************
** GENERATING OUTPUT ** 
***********************

// Explore the data 
/* Let's learn about the variables in our data set. These two commands 
('describe' and 'codebook') will show us detailed information about 
each variable in the data set. */ 

describe // Provides information for all the variables in your data. 
describe death divorce  // describes a subset of variables. 

/* You can also describe data sets without opening them. This is especially 
handy with big data sets that take a long time to load and take up a lot of 
memory. */ 
desc using data/crime_states_1960.dta

/* Codebook gives you some summary statistics in addition to labels.  */ 
codebook // all variables 
codebook, compact // a more concise format
codebook death divorce, compact // limited to the variables that you list 
<</dd_do>>

```

## Other kinds of summaries

Finally, the `tabulate` and `summarize` command provide two alternative ways of
getting information out of your data.

```stata
<<dd_do>>

// Create a table 
tabulate region // basic cell counts 
tab region, nolabel // Reveals the numeric values assigned to the categories 

// Get basic descriptives 
summarize 
summarize pop, detail // more detailed output 
<</dd_do>>
```
